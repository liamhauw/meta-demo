#pragma once
{{#include_headfiles}}
#include "../{{headfile_name}}"
{{/include_headfiles}}

namespace luka {

{{#class_defines}}
class {{class_name}};
{{/class_defines}}

namespace reflection {

{{#class_defines}}
namespace type_field_reflection_oparator {

class Type{{class_name}}Operator{
public:
  static const char* GetClassName(){ return "{{class_name}}";}
  static void* ConstructorWithJson(const Json& json_context){
    {{class_name}}* ret_instance= new {{class_name}};
    Serializer::Read(json_context, *ret_instance);
    return ret_instance;
  }
  static Json WriteByName(void* instance){
    return Serializer::Write(*({{class_name}}*)instance);
  }

  static int Get{{class_name}}BaseClassReflectionInstanceList(ReflectionInstance* &out_list, void* instance){
    int count = {{class_base_class_size}};
    {{#class_has_base}}
    out_list = new ReflectionInstance[count];
    for (int i=0;i<count;++i){
    {{#class_base_class_defines}}
        out_list[i] = TypeMetaDef({{class_base_class_name}},static_cast<{{class_name}}*>(instance));
    {{/class_base_class_defines}}
    }
    {{/class_has_base}}
    return count;
  }

  {{#class_field_defines}}
  static const char* GetFieldName_{{class_field_name}}(){ return "{{class_field_name}}";}
  static const char* GetFieldTypeName_{{class_field_name}}(){ return "{{{class_field_type}}}";}
  static void Set_{{class_field_name}}(void* instance, void* field_value){ static_cast<{{class_name}}*>(instance)->{{class_field_name}} = *static_cast<{{{class_field_type}}}*>(field_value);}
  static void* Get_{{class_field_name}}(void* instance){ return static_cast<void*>(&(static_cast<{{class_name}}*>(instance)->{{class_field_name}}));}
  static bool IsArray_{{class_field_name}}(){ {{#class_field_is_vector}}return true;{{/class_field_is_vector}}{{^class_field_is_vector}}return false;{{/class_field_is_vector}} }
  {{/class_field_defines}}
  {{#class_method_defines}}
  static const char* GetMethodName_{{class_method_name}}(){ return "{{class_method_name}}";}
  static void Invoke_{{class_method_name}}{{class_method_name}}(void * instance){static_cast<{{class_name}}*>(instance)->{{class_method_name}}();}
  {{/class_method_defines}}
};

}  // namespace type_field_reflection_oparator


namespace array_reflection_oparator {

{{#vector_exist}}{{#vector_defines}}
#ifndef Array{{vector_useful_name}}OperatorMACRO
#define Array{{vector_useful_name}}OperatorMACRO
  class Array{{vector_useful_name}}Operator{
    public:
      static const char* GetArrayTypeName(){ return "{{{vector_type_name}}}";}
      static const char* GetElementTypeName(){ return "{{{vector_element_type_name}}}";}
      static int GetSize(void* instance){
        return static_cast<int>(static_cast<{{{vector_type_name}}}*>(instance)->size());
      }
      static void* Get(int index,void* instance){
        return static_cast<void*>(&((*static_cast<{{{vector_type_name}}}*>(instance))[index]));
      }
      static void Set(int index, void* instance, void* element_value){
        (*static_cast<{{{vector_type_name}}}*>(instance))[index] = *static_cast<{{{vector_element_type_name}}}*>(element_value);
      }
  };
#endif
{{/vector_defines}}{{/vector_exist}}

}  // namespace array_reflection_oparator

void TypeWrapperRegister_{{class_name}}(){
  {{#class_field_defines}}
  FieldFunctionTuple* field_function_tuple_{{class_field_name}} = new FieldFunctionTuple(
    &type_field_reflection_oparator::Type{{class_name}}Operator::Set_{{class_field_name}},
    &type_field_reflection_oparator::Type{{class_name}}Operator::Get_{{class_field_name}},
    &type_field_reflection_oparator::Type{{class_name}}Operator::GetClassName,
    &type_field_reflection_oparator::Type{{class_name}}Operator::GetFieldName_{{class_field_name}},
    &type_field_reflection_oparator::Type{{class_name}}Operator::GetFieldTypeName_{{class_field_name}},
    &type_field_reflection_oparator::Type{{class_name}}Operator::IsArray_{{class_field_name}});
  REGISTER_FIELD_TO_MAP("{{class_name}}", field_function_tuple_{{class_field_name}});
  {{/class_field_defines}}

  {{#class_method_defines}}
  MethodFunctionTuple* method_function_tuple_{{class_method_name}} = new MethodFunctionTuple(
    &type_field_reflection_oparator::Type{{class_name}}Operator::GetMethodName_{{class_method_name}},
    &type_field_reflection_oparator::Type{{class_name}}Operator::Invoke_{{class_method_name}}{{class_method_name}});
  REGISTER_Method_TO_MAP("{{class_name}}", method_function_tuple_{{class_method_name}});
  {{/class_method_defines}}
  
  {{#vector_exist}}{{#vector_defines}}
  ArrayFunctionTuple* array_tuple_{{vector_useful_name}} = new ArrayFunctionTuple(
    &array_reflection_oparator::Array{{vector_useful_name}}Operator::Set,
    &array_reflection_oparator::Array{{vector_useful_name}}Operator::Get,
    &array_reflection_oparator::Array{{vector_useful_name}}Operator::GetSize,
    &array_reflection_oparator::Array{{vector_useful_name}}Operator::GetArrayTypeName,
    &array_reflection_oparator::Array{{vector_useful_name}}Operator::GetElementTypeName);
  REGISTER_ARRAY_TO_MAP("{{{vector_type_name}}}", array_tuple_{{vector_useful_name}});
  {{/vector_defines}}{{/vector_exist}}

  {{#class_need_register}}
  ClassFunctionTuple* class_function_tuple_{{class_name}}= new ClassFunctionTuple(
    &type_field_reflection_oparator::Type{{class_name}}Operator::Get{{class_name}}BaseClassReflectionInstanceList,
    &type_field_reflection_oparator::Type{{class_name}}Operator::ConstructorWithJson,
    &type_field_reflection_oparator::Type{{class_name}}Operator::WriteByName);
  REGISTER_BASE_CLASS_TO_MAP("{{class_name}}", class_function_tuple_{{class_name}});
  {{/class_need_register}}
}

{{/class_defines}}

namespace type_wrappers_register {

void {{sourefile_name_upper_camel_case}}()
{
  {{#class_defines}}
  TypeWrapperRegister_{{class_name}}();
  {{/class_defines}}
}    

}  // namespace type_wrappers_register

}  // namespace reflection

}  // namespace Piccolo
